name: LogoLeague-CI-CD
run-name: Deploy pipeline with commit sha ${{ github.sha }} started by ${{ github.actor }}

on:
  workflow_dispatch:
  push:
    branches:
      - main
      - develop
env:
  AWS_REGION: "eu-north-1"
  PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }} # Private key that we created on ec2
  USER_NAME: ${{ secrets.USER_NAME }} # User name of the ec2 user.
  HOSTNAME: ${{ secrets.SSH_HOST }} # Elastic IP or IP of EC2

jobs:
  Deploy_Docker_compose:
    runs-on: 'ubuntu-20.04'

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Create $HOME/.ssh
        run: |
          if [ ! -d "$HOME/.ssh" ]; then
            mkdir -p $HOME/.ssh
            echo "Directory '$HOME/.ssh' created."
          else
            echo "Directory '$HOME/.ssh' already exists."
          fi

      - name: Create known_hosts
        run: |
          if [ -e "$HOME/.ssh/known_hosts" ]; then
            echo "File '$HOME/.ssh/known_hosts' already exists."
          else
            touch $HOME/.ssh/known_hosts
            echo "File '$HOME/.ssh/known_hosts' created."           
          fi

      - name: Make zip with all repo files
        run: |
          sudo apt-get update  
          sudo apt-get install -y zip
          zip -r nest.zip  .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Add EC2 host to the $HOME/.ssh/known_hosts
        run: |
          HOST=`ssh-keygen -F "${{ env.HOSTNAME }}" -f $HOME/.ssh/known_hosts | grep ${{ env.HOSTNAME}} | wc -c`
          if [[ "$HOST" -eq 0 ]]; then
            ssh-keyscan -H ${{ env.HOSTNAME }} >> $HOME/.ssh/known_hosts
            echo "Added EC2 host to the $HOME/.ssh/known_hosts"
          else
            echo "EC2 host exists in the $HOME/.ssh/known_hosts"
          fi

      - name: Copy repo zip-file to EC2
        run: |
          sudo apt-get update  
          sudo apt-get install -y unzip
          if [ -e "$HOME/.ssh/private_key" ]; then
            echo "File '$HOME/.ssh/private_key' already exists."
          else
            touch $HOME/.ssh/private_key
            echo "File '$HOME/.ssh/private_key' created."           
          fi
          echo "${{ env.PRIVATE_KEY }}" > $HOME/.ssh/private_key && chmod 600 $HOME/.ssh/private_key
          scp -i $HOME/.ssh/private_key nest.zip ${{ env.USER_NAME }}@${{ env.HOSTNAME }}:/home/${{ env.USER_NAME }}

      - name: Connect via ssh to EC2 and install docker/docker-compose
        run: | # Connect to EC2
          ssh -i $HOME/.ssh/private_key ${{ env.USER_NAME }}@${{ env.HOSTNAME }} '

            if [ -x "$(command -v docker)" ]; then
              echo "Docker is installed."
            else
              echo "Docker is not installed."

              sudo apt-get update
              sudo apt-get upgrade -y
              sudo apt-get autoremove
              sudo apt-get install ca-certificates curl gnupg
              sudo install -m 0755 -d /etc/apt/keyrings
              curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
              sudo chmod a+r /etc/apt/keyrings/docker.gpg
              echo "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update
              sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin -y
              sudo groupadd docker
              sudo usermod -aG docker $USER
              echo "Docker installed"
              docker -v
            fi
            '

      - name: Install AWS CLI
        run: |
          ssh -i $HOME/.ssh/private_key ${{ env.USER_NAME }}@${{ env.HOSTNAME }} '
          sudo apt-get install unzip
          if [ -x "$(command -v aws)" ]; then
            echo "AWSCLI is installed."
          else
            echo "AWSCLI is not installed."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          fi
          '

      - name: Send secrets and variables to EC2 and run docker compose
        run: |
          ssh -i $HOME/.ssh/private_key ${{ env.USER_NAME }}@${{ env.HOSTNAME }} '
            export PORT=${{ vars.PORT }}
            export DB_TYPE=${{ vars.DB_TYPE }}
            export DB_HOST=${{ vars.DB_HOST }}
            export DB_PORT=${{ vars.DB_PORT }}
            export POSTGRES_DB=${{ vars.POSTGRES_DB }}
            export POSTGRES_USER=${{ vars.POSTGRES_USER }}
            export POSTGRES_PASSWORD=${{ vars.POSTGRES_PASSWORD }}
            export RIOT_API_KEY=${{ vars.RIOT_API_KEY }}
            cd $HOME/nest 
            docker compose -f docker-compose.yml up --build -d
            '
